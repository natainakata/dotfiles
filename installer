#!/bin/bash

DOT_DIR="$HOME/.dotfiles"

function has {
  type "$1" > /dev/null 2>&1
}

# errorレベルのエラーメッセージを出力しつつスクリプトを異常終了させる関数
function error {
  echo "[error] $1" >&2
  exit 1
}

# infoレベルのエラーメッセージを出力する関数
function info {
  echo "[info] $1"
}

# コマンドを表示しつつ実行する関数
function invoke {
  info $@
  $@ || error "コマンドの実行に失敗しました"
}

all () {
  [ -z $NODOWNLOAD ] && download
  shim
  toolchain
  exit 0
}

download() {
  if [ ! -d ${DOT_DIR} ]; then
    if has "git"; then
      git clone https://github.com/natainakata/dotfiles.git ${DOT_DIR}
    else
      error "git required"
    fi
  else
    error "dotfiles already exists"
  fi
}

function shim() {
  echo "Home Dir shim"
  home_files=(`ls -1 $DOT_DIR/home/`)
  for home_file in "${home_files[@]}"; do
    ln -snfv "$DOT_DIR/home/${home_file}" "$HOME/.${home_file}"
  done
  ln -snfv "$DOT_DIR/home/zsh/zshrc" "$HOME/.zshrc"
  echo "Done."

  echo "Config dir shim"
  if [ ! -d "$HOME/.config" ]; then
    echo "Create config dir"
    mkdir -p "$HOME/.config"
    echo "Done."
  fi

  config_files=(`ls -1 $DOT_DIR/config/`)
  for config_file in "${config_files[@]}"; do
    ln -snfv "$DOT_DIR/config/${config_file}" "$HOME/.config/"
  done
  echo "Done."
}

toolchain() {
  echo 'Toolchain install'
  if [ ! -d "$HOME/.nix" ]; then
      mkdir ~/.nix
      cat <<EOF > ~/.nix/nix.conf
bash-prompt-prefix = (nix:$name)\040
experimental-features = nix-command flakes auto-allocate-uids
extra-nix-path = nixpkgs=flake:nixpkgs
EOF
    fi
  if ! has "nix" ; then
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
    echo "Home Manager build"
    cd $DOT_DIR/nix
    . $HOME/.nix-profile/etc/profile.d/nix.sh
    echo "Run `cd ~/.dotfiles/nix && nix run nixpkgs#home-manager -- switch --flake ".#natai"`"
    echo "done"
  else
    echo "Home Manager build"
    cd $DOT_DIR/nix
    nix run nixpkgs#home-manager -- switch --flake ".#natai"
    echo "Done."
  fi
}

ARGS=()

while (("$#" > 0 )); do
  case $1 in
    -n | --nodownload) NODOWNLOAD=1;;
    * ) ARGS=("${ARGS[@]}" "$1");;
  esac
  shift
done

[ -z "${ARGS}" ] && all

get_nth () {
  local n=$1
  shift
  eval echo \$${n}
}

ARG1=$(get_nth 1 "${ARGS[@]}")

invoke $ARG1
exit 0
